<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off ()</l>
<l>read_image (Image, 'D:/BZVisualInspect/UserData/DebugImage/AlgVarModelInspectTemp/苹果xr-White_KEY_L4/Up/0_9_5_1_OriImage.bmp')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>zoom_image_size (Image, ImageZoom, 512*Width/Height, 512, 'constant')</l>
<l>get_image_size (ImageZoom, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_color ('red')</l>
<l>dev_display (Image)</l>
<l>DarkThres := 10</l>
<l>LightThres := 20</l>
<l>DarkArea := 100</l>
<l>LightArea := 100</l>
<l>ThresLow := 15</l>
<l>ThresHigh := 30</l>
<l>DarkOpen := 3.5</l>
<l>LightOpen := 2.5</l>
<l>MarkType := 1</l>
<l>TrainUsed := 1</l>
<l>MaxImagePath := 'D:/BZVisualInspect/UserData/Mission/苹果XR/苹果xr-White/Model/PageNo9/Alg/KEY_L4_MAX.bmp'</l>
<l>MinImagePath := 'D:/BZVisualInspect/UserData/Mission/苹果XR/苹果xr-White/Model/PageNo9/Alg/KEY_L4_MIN.bmp'</l>
<l>if(MarkType == 0)</l>
<l>  read_shape_model ('D:/BZVisualInspect/UserData/Mission/苹果XR/苹果xr-White/Model/PageNo9/Alg/KEY_L4_MODEL.shm', ShapeModelID)  </l>
<l>endif</l>
<l>read_tuple ('D:/BZVisualInspect/UserData/Mission/苹果XR/苹果xr-White/Model/PageNo9/Alg/KEY_L4_ORI.tup', Ori)</l>
<l>read_image (ImageMax, MaxImagePath)</l>
<l>read_image (ImageMin, MinImagePath)</l>
<l>RowRef := Ori[0]</l>
<l>ColumnRef := Ori[1]</l>
<l>PhiRef := Ori[2]</l>
<l>NumTrainMax := 35</l>
<l>NumCheckMax := 50</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<c>* Train Image</c>
<l>if(TrainUsed == 1)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('D:/BZVisualInspect/UserData/DebugImage/AlgVarModelInspectTemp/苹果xr-White_KEY_L4/Up', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l>tuple_min ([NumTrainMax,|ImageFiles|], Num)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to Num - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<l>    if(MarkType == 0)</l>
<l>        find_shape_model (Image, ShapeModelID, rad(-10), rad(20), 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row, Column, Angle, Score)</l>
<l>        if (|Score| == 1)</l>
<l>            if(Score[0] &gt; 0.5)</l>
<l>                vector_angle_to_rigid (Row, Column, Angle, RowRef, ColumnRef, PhiRef, HomMat2D)</l>
<l>                affine_trans_image (Image, ImageTrans, HomMat2D, 'constant', 'false')</l>
<l>                max_image(ImageMax, ImageTrans, ImageMax)</l>
<l>                min_image(ImageMin, ImageTrans, ImageMin)</l>
<l>                dev_display (ImageTrans)</l>
<l>*               stop()</l>
<l>            endif</l>
<l>        endif</l>
<l>    else</l>
<l>        mean_image(Image, ImageMean, 31, 31)</l>
<l>        dyn_threshold(Image, ImageMean, RegionDynThresh, ThresLow, 'dark')</l>
<l>        threshold (Image, Region, 0, ThresHigh)</l>
<l>        union2(RegionDynThresh, Region, RegionUnion)</l>
<l>        closing_circle(RegionUnion, RegionUnion, 7.5)</l>
<l>        connection(RegionUnion, RegionConnection)</l>
<l>        select_shape_std (RegionConnection, SelectedRegions, 'max_area', 70)</l>
<l>        fill_up (SelectedRegions, RegionFillUp)</l>
<l>        area_center(RegionFillUp, Area, Row, Column)</l>
<l>        elliptic_axis (RegionFillUp, NULL, NULL, Angle)</l>
<l>        if (Angle &lt; rad(-45))</l>
<l>            Angle := Angle + rad(180)</l>
<l>        endif</l>
<l>        vector_angle_to_rigid (Row, Column, Angle, RowRef, ColumnRef, PhiRef, HomMat2D)</l>
<l>        affine_trans_image (Image, ImageTrans, HomMat2D, 'weighted', 'false')</l>
<l>        max_image(ImageMax, ImageTrans, ImageMax)</l>
<l>        min_image(ImageMin, ImageTrans, ImageMin)</l>
<l>        affine_trans_region (RegionFillUp, RegionFillUp, HomMat2D, 'nearest_neighbor')</l>
<l>        dev_display (ImageTrans)</l>
<l>        dev_display(RegionFillUp)</l>
<l>        stop()</l>
<l>    endif    </l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<l>endif</l>
<c>* Check Image</c>
<l>dev_display (ImageMax)</l>
<l>set_tposition (WindowHandle, 20, 20)</l>
<l>dev_set_color ('blue')</l>
<l>write_string (WindowHandle, 'Max image')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>dev_display (ImageMin)</l>
<l>set_tposition (WindowHandle, 20, 20)</l>
<l>dev_set_color ('blue')</l>
<l>write_string (WindowHandle, 'Min image')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>write_image (ImageMin, 'bmp', 0, MinImagePath)</l>
<l>write_image (ImageMax, 'bmp', 0, MaxImagePath)</l>
<l>dev_set_draw ('margin')</l>
<l>list_files ('D:/BZVisualInspect/UserData/DebugImage/AlgVarModelInspectTemp/苹果xr-White_KEY_L4/Up/NG', ['files','follow_links'], ImageFiles1)</l>
<l>tuple_regexp_select (ImageFiles1, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles1)</l>
<l>tuple_min ([NumCheckMax,|ImageFiles1|], Num)</l>
<l>for Index := 0 to Num - 1 by 1</l>
<l>    read_image (Image, ImageFiles1[Index])</l>
<l>    hom_mat2d_identity (HomMat2D)</l>
<l>    if(MarkType == 0)</l>
<l>        find_shape_model (Image, ShapeModelID, rad(-10), rad(20), 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row, Column, Angle, Score)</l>
<l>        if (|Score| == 1)</l>
<l>            vector_angle_to_rigid (Row, Column, Angle, RowRef, ColumnRef, PhiRef, HomMat2D)</l>
<l>         endif</l>
<l>    else</l>
<l>        mean_image(Image, ImageMean, 31, 31)</l>
<l>        dyn_threshold(Image, ImageMean, RegionDynThresh, ThresLow, 'dark')</l>
<l>        threshold (Image, Region, 0, ThresHigh)</l>
<l>        union2(RegionDynThresh, Region, RegionUnion)</l>
<l>        closing_circle(RegionUnion, RegionUnion, 7.5)</l>
<l>        connection(RegionUnion, RegionConnection)</l>
<l>        select_shape_std (RegionConnection, SelectedRegions, 'max_area', 70)</l>
<l>        fill_up (SelectedRegions, RegionFillUp)</l>
<l>        area_center(RegionFillUp, Area, Row, Column)</l>
<l>        elliptic_axis (RegionFillUp, NULL, NULL, Angle)</l>
<l>        if (Angle &lt; rad(-45))</l>
<l>            Angle := Angle + rad(180)</l>
<l>        endif</l>
<l>        vector_angle_to_rigid (Row, Column, Angle, RowRef, ColumnRef, PhiRef, HomMat2D)</l>
<l>    endif</l>
<l>    affine_trans_image (Image, ImageTrans, HomMat2D, 'weighted', 'false')</l>
<l>    threshold (ImageTrans, Region3, 1, 255)</l>
<l>    fill_up(Region3, Region3)</l>
<l>    threshold (ImageMax, Region4, 1, 255)</l>
<l>    fill_up(Region4, Region4)</l>
<l>    threshold (ImageMin, Region5, 1, 255)</l>
<l>    fill_up(Region5, Region5)</l>
<l>    intersection (Region3, Region4, RegionIntersection)</l>
<l>    intersection (RegionIntersection, Region5, RegionIntersection)</l>
<c>        </c>
<l>        sub_image(ImageMin, ImageTrans, ImageSub1, 1, 0)</l>
<l>        threshold (ImageSub1, Region1, DarkThres, 255)</l>
<l>        opening_circle(Region1, RegionOpenDark, DarkOpen)</l>
<l>        intersection(RegionOpenDark, RegionIntersection, RegionOpenDark)</l>
<l>        connection (RegionOpenDark, ConnectedRegions)</l>
<l>        select_shape (ConnectedRegions, RegionsError1, 'area', 'and', DarkArea, 1000000)</l>
<c>        </c>
<l>        sub_image(ImageTrans, ImageMax, ImageSub2, 1, 0)</l>
<l>        threshold(ImageSub2, Region2, LightThres, 255)</l>
<l>        closing_circle(Region2, Region2, 5.5)</l>
<l>        opening_circle(Region2, RegionOpenLight, LightOpen)</l>
<l>        intersection(RegionOpenLight, RegionIntersection, RegionOpenLight)</l>
<l>        connection (RegionOpenLight, ConnectedRegions)</l>
<l>        select_shape (ConnectedRegions, RegionsError2, 'area', 'and', LightArea, 1000000)</l>
<c>        </c>
<l>        union2(RegionsError1, RegionsError2, RegionUnion)</l>
<l>        connection(RegionUnion, RegionUnion)</l>
<c>   </c>
<l>        count_obj (RegionUnion, NumError)</l>
<l>        hom_mat2d_invert (HomMat2D, HomMat2DInvert)</l>
<l>        affine_trans_region (RegionUnion, RegionAffineTrans, HomMat2DInvert, 'nearest_neighbor')</l>
<l>        dev_clear_window ()</l>
<l>        dev_display (ImageTrans)</l>
<l>        dev_set_color ('red')</l>
<l>        dev_display (RegionUnion)</l>
<l>        set_tposition (WindowHandle, 20, 20)</l>
<l>        if (NumError == 0)</l>
<l>            dev_set_color ('green')</l>
<l>            write_string (WindowHandle, 'Logo OK')</l>
<l>        else</l>
<l>            dev_set_color ('red')</l>
<l>            write_string (WindowHandle, 'Logo not OK')</l>
<l>        endif</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
